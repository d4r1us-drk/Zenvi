#+title: Data Design
#+subtitle: Zenix data structure design
#+author: Clay Gomera
#+latex_class: article
#+latex_class_options: [letterpaper,12pt]
#+latex_header: \usepackage[margin=1in]{geometry}
#+latex_header: \usepackage{fontspec}
#+latex_header: \setmainfont{Carlito} % or any other font you prefer
#+latex_compiler: xelatex
#+OPTIONS: toc:nil date:nil num:nil
#+description: Document detailing the data objects and relations in the project

** Identified Entities and Relations

*** User Profile
A user has the following data:
- *username*
- *email*
- *password*: the hashed password of the user
- *name*
- *surname*
- *date of birth*
- *bio*: the user's profile description
- *profile picture*
- *banner picture*
- *role*: a user can be either an administrator or a regular user
- *banned* true if the user has been banned

**** Relations
A user is related to:
- *posts*: a user can have multiple posts.
- *following*: a user can follow multiple users.
- *followers*: a user can have multiple followers.
- *messages*: a user can send multiple messages to another user.
- *group chats*: a user can have multiple group chats.
- *group messages*: within a group chat, a user can send messages to multiple users.
- *notifications*: a user can have multiple notifications from multiple sources.
- *bans*: a user can be banned multiple times.

*** Post
A post has the following data:
- *user*
- *content*
- *media*
- *like count*
- *post type*: either top or a comment/reply
- *parent post*: if it's a comment/reply, the post that it's commenting on
- *created at*: the timestamp when the post was created
- *updated at*: if the post is ever updated, the timestamp when this occurred

**** Relations
A post is related to:
- *user*: a post is created by a user
- *posts*: a post can have other posts as comments/replies
- *likes*: a post can have many likes
- *hashtags*: extracted from the content, a post can have multiple hashtags
- *media*: a post can have many pictures

*** Follow
A follow represents a relationship between two users:
- *source user*
- *target user*
- *created at*: the timestamp when a user followed the other

**** Relations
- *users*: the source user and the target user in this relationship

**** Considerations
- For obvious reasons, the source user cannot be the same as the target user.

This is how you can determine if two users follow each other:

SQL:
#+BEGIN_SRC sql
SELECT
    uf1.sourceId AS user1,
    uf1.targetId AS user2,
    uf2.sourceId AS user2,
    uf2.targetId AS user1
FROM
    user_follower uf1
JOIN
    user_follower uf2
ON
    uf1.sourceId = uf2.targetId
    AND uf1.targetId = uf2.sourceId
WHERE
    uf1.sourceId = userId1
    AND uf1.targetId = userId2
    AND uf2.sourceId = userId2
    AND uf2.targetId = userId1;
#+END_SRC

C# method with Entity Framework:
#+BEGIN_SRC csharp
public bool AreUsersFollowingEachOther(long userId1, long userId2)
{
    using (var context = new MyDbContext())
    {
        var followsEachOther = context.UserFollowers
            .Any(uf1 => uf1.SourceId == userId1 && uf1.TargetId == userId2 &&
                        context.UserFollowers.Any(uf2 => uf2.SourceId == userId2 && uf2.TargetId == userId1));

        return followsEachOther;
    }
}
#+END_SRC

*** Like/Favorite
A like acts as a boost for a post and a favorite as a saved post. It is composed of:
- *post*
- *user*
- *type*: either like or favorite
- *created at*: the timestamp when the user liked or favorited the post

**** Relations
A like/favorite is related to:
- *user*: the user who is creating the like or favorite
- *post*: the post that the user is liking or marking as favorite

*** Hashtag
A post can have one or more hashtags. A hashtag is composed of:
- *post*
- *tag*: the hashtag string (can't have spaces)

**** Relations
A hashtag is related to:
- *post*: the post that contains this hashtag

*** Media
This is a multimedia element that the user can upload for multiple purposes. It
is composed of:
- *media url*: the path to the image in the server
- *type*: the media type, can be either video or photo
- *source*: where the media is being used
- *created at*: a useful timestamp that indicates when the media was sent or uploaded

**** Relations
A multimedia element is related to:
- *post/message* (source)

*** Private Message
A private message has the following data:
- *sender*
- *receiver*
- *content*
- *media*: a list of multimedia elements
- *created at*: the timestamp when the message was sent

**** Relations
A private message is related to:
- *sender*: the user who sends the message
- *receiver*: the user who receives the message
- *media*: the multimedia elements included in the message

*** Group Chat
A group chat has the following data:
- *created by*: the user who created the group chat
- *title*
- *description*
- *group picture*
- *created at*: the timestamp when the group chat was created
- *updated at*: the timestamp when the group chat was last updated

**** Relations
A group chat is related to:
- *members*: a list of users who are members of the group chat
- *messages*: a list of messages in the group chat
- *media*: the group picture

*** Group Message
A group message has the following data:
- *group chat*: the group chat where the message is posted
- *sender*: the user who sends the message
- *content*
- *media*: a list of multimedia elements
- *created at*: the timestamp when the message was sent

**** Relations
A group message is related to:
- *group chat*: the group chat where the message is posted
- *sender*: the user who sends the message
- *media*: the multimedia elements included in the message

*** Group Member
A group member has the following data:
- *group chat*: the group chat the user belongs to
- *user*: the user who is a member of the group chat
- *role*: the role of the user in the group (e.g., admin, member)
- *joined at*: the timestamp when the user joined the group

**** Relations
A group member is related to:
- *group chat*: the group chat the user belongs to
- *user*: the user who is a member of the group chat

*** Notification
A notification has the following data:
- *user*: the user who receives the notification
- *type*: the type of notification (e.g., new message, new follower)
- *message*: the content of the notification
- *created at*: the timestamp when the notification was created

**** Relations
A notification is related to:
- *user*: the user who receives the notification

*** Report
A report has the following data:
- *reportId*
- *reportedBy (user)*
- *post*
- *reason*
- *status*
- *created at*

**** Relations
A report is related to:
- *reportedBy*: the user who reported the post
- *post*: the post being reported

*** Ban
A ban has the following data:
- *user*: the user who is banned
- *banned at*: the timestamp when the user was banned
- *banned until:* timestamp when the user will be unbanned
- *reason*: the reason for the ban
- *report*: the report that triggered the ban (nullable)

**** Relations
A ban is related to:
- *user*: the user who is banned
- *report*: the report that triggered the ban (if applicable)

** Inspirations
I used these examples and guides as inspiration:
1. [[https://mysql.tutorials24x7.com/blog/guide-to-design-database-for-social-network-system-in-mysql]]
