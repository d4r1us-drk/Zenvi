@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Zenvi.Data.Models
@using Zenvi.Services

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject IMediaService MediaService

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage/>

@if (_user != null)
{
    <div class="row">
        <div class="col-md-6">
            <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger" role="alert"/>
                <div class="form-floating mb-3">
                    <input type="text" value="@_username" class="form-control" placeholder="Please choose your username." disabled/>
                    <label for="username" class="form-label">Username</label>
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Name" class="form-control" placeholder="Please enter your name."/>
                    <label for="name" class="form-label">Name</label>
                    <ValidationMessage For="() => Input.Name" class="text-danger"/>
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Surname" class="form-control" placeholder="Please enter your surname."/>
                    <label for="surname" class="form-label">Surname</label>
                    <ValidationMessage For="() => Input.Surname" class="text-danger"/>
                </div>
                <div class="form-floating mb-3">
                    <InputDate @bind-Value="Input.DateOfBirth" class="form-control" placeholder="Please enter your date of birth."/>
                    <label for="date-of-birth" class="form-label">Date of Birth</label>
                    <ValidationMessage For="() => Input.DateOfBirth" class="text-danger"/>
                </div>
                <div class="form-floating mb-3">
                    <InputTextArea @bind-Value="Input.Bio" class="form-control" placeholder="Please enter your bio."/>
                    <label for="bio" class="form-label">Bio</label>
                    <ValidationMessage For="() => Input.Bio" class="text-danger"/>
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number."/>
                    <label for="phone-number" class="form-label">Phone number</label>
                    <ValidationMessage For="() => Input.PhoneNumber" class="text-danger"/>
                </div>

                <div class="form-floating mb-3">
                    <label for="profile-picture" class="form-label">Profile picture</label>
                    <InputFile OnChange="HandleProfilePictureUpload" class="form-control"/>
                    @if (_user.ProfilePicture != null)
                    {
                        <img src="data:image/png;base64,@Convert.ToBase64String(_user.ProfilePicture.MediaBlob)" alt="Profile Picture" style="max-width: 100px; max-height: 100px;"/>
                        <button type="button" class="btn btn-danger" @onclick="RemoveProfilePicture">Delete</button>
                    }
                </div>

                <div class="form-floating mb-3">
                    <label for="banner-picture" class="form-label">Banner picture</label>
                    <InputFile OnChange="HandleBannerPictureUpload" class="form-control"/>
                    @if (_user.BannerPicture != null)
                    {
                        <img src="data:image/png;base64,@Convert.ToBase64String(_user.BannerPicture.MediaBlob)" alt="Banner Picture" style="max-width: 400px; max-height: 150px;"/>
                        <button type="button" class="btn btn-danger" @onclick="RemoveBannerPicture">Delete</button>
                    }
                </div>

                <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    private ApplicationUser _user = default!;
    private string? _username;
    private string? _phoneNumber;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _username = await UserManager.GetUserNameAsync(_user);
        _phoneNumber = await UserManager.GetPhoneNumberAsync(_user);

        Input.Name ??= _user.Name;
        Input.Surname ??= _user.Surname;
        Input.DateOfBirth ??= _user.DateOfBirth;
        Input.Bio ??= _user.Bio;
        Input.PhoneNumber ??= _phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (_user.Name != Input.Name)
            _user.Name = Input.Name;

        if (Input.Surname != _user.Surname)
            _user.Surname = Input.Surname;

        if (Input.DateOfBirth != _user.DateOfBirth)
            _user.DateOfBirth = Input.DateOfBirth;

        if (Input.Bio != _user.Bio)
            _user.Bio = Input.Bio;

        if (Input.PhoneNumber != _user.PhoneNumber)
            _user.PhoneNumber = Input.PhoneNumber;

        var updateResult = await UserManager.UpdateAsync(_user);
        if (!updateResult.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to update profile.", HttpContext);
            return;
        }

        await SignInManager.RefreshSignInAsync(_user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private async Task HandleProfilePictureUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var media = await MediaService.SaveMediaAsync(file.OpenReadStream(), MediaType.Png); // Assuming PNG, change if needed
        _user.ProfilePicture = media;
    }

    private async Task HandleBannerPictureUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var media = await MediaService.SaveMediaAsync(file.OpenReadStream(), MediaType.Png); // Assuming PNG, change if needed
        _user.BannerPicture = media;
    }

    private void RemoveProfilePicture()
    {
        _user.ProfilePicture = null;
    }

    private void RemoveBannerPicture()
    {
        _user.BannerPicture = null;
    }

    private sealed class InputModel
    {
        [Required] [Display(Name = "Name")] public string? Name { get; set; }

        [Required] [Display(Name = "Surname")] public string? Surname { get; set; }

        [Required]
        [Display(Name = "Date of Birth")]
        [DataType(DataType.Date)]
        public DateOnly? DateOfBirth { get; set; }

        [Display(Name = "Bio")] public string? Bio { get; set; }

        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }

}