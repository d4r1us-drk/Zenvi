@model Zenvi.Models.UserPostsViewModel

<div class="container-fluid">
    <div class="row justify-content-center">
        <!-- Main Content -->
        <div class="col-md-8">
            <!-- Larger Profile Section -->
            <div class="card larger-profile-card">
                <div class="card_background_img" style="background-image: url('@(Model.User.BannerPicture != null ? Url.Content($"~/media/{Model.User.BannerPicture.Name}") : Url.Content("~/images/profile-banner-placeholder.png"))');"></div>
                <div class="card_profile_img" style="background-image: url('@(Model.User.ProfilePicture != null ? Url.Content($"~/media/{Model.User.ProfilePicture.Name}") : Url.Content("~/images/profile-picture-placeholder.png"))');"></div>
                <div class="user_details larger">
                    <h3>@Model.User.Name @Model.User.Surname</h3>
                    <p>@Model.User.Bio</p>
                    @if (Model.IsCurrentUser)
                    {
                        <a href="~/Identity/Account/Manage" class="btn btn-primary">Edit profile</a>
                    }
                    else
                    {
                        <button id="follow-btn" class="btn @(Model.IsFollowing ? "btn-secondary" : "btn-primary")" onclick="toggleFollow('@Model.User.Id')">
                            @(Model.IsFollowing ? "Following" : "Follow")
                        </button>
                    }
                </div>
            </div>

            <!-- Post Form -->
            @if (Model.IsCurrentUser)
            {
                <div class="card mb-4">
                    <div class="card-body">
                        <form asp-action="CreatePost" method="post" enctype="multipart/form-data">
                            <div class="form-group">
                                <textarea class="form-control" name="content" rows="3" placeholder="What's on your mind?"></textarea>
                            </div>
                            <div class="form-group" style="display: flex; align-items: center;">
                                <button type="submit" class="btn btn-primary mt-2" style="margin-right: 20px">Post!</button>
                                <label for="mediaFiles" class="custom-file-upload">
                                    <i class="fas fa-cloud-upload-alt"></i> <span id="upload-text">Upload Media</span>
                                </label>
                                <input type="file" class="form-control-file" id="mediaFiles" name="mediaFiles" multiple />
                            </div>
                        </form>
                    </div>
                </div>
            }

            <!-- Posts -->
            <div id="post-container">
                @await Html.PartialAsync("_PostListPartial", Model.Posts)
            </div>
            <div id="loading-spinner" style="display:none;">
                <p>Loading...</p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const mediaFilesElement = document.getElementById("mediaFiles");
            if (mediaFilesElement) {
                mediaFilesElement.addEventListener("change", function () {
                    var count = this.files.length;
                    var text = count > 1 ? count + " files selected" : (count === 1 ? count + " file selected" : "Upload Media");
                    document.getElementById("upload-text").innerText = text;
                });
            }
        });

        async function toggleLike(postId, button) {
            try {
                const response = await fetch('/api/LikesApi/ToggleLikePost', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify(postId)
                });

                if (response.ok) {
                    const data = await response.json();
                    const likeSpan = button.querySelector('.like');
                    if (data && data.likeCount !== undefined) {
                        likeSpan.textContent = `Like (${data.likeCount})`;
                    } else {
                        console.error('Unexpected response format:', data);
                    }
                } else {
                    console.error('Failed to toggle like:', response.status, response.statusText);
                }
            } catch (error) {
                console.error('Error toggling like:', error);
            }
        }

        async function toggleFollow(targetUserId) {
            const followButton = document.getElementById('follow-btn');
            const isFollowing = followButton.textContent.trim() === "Following";

            try {
                const response = await fetch(`/api/FollowApi/${isFollowing ? "Unfollow" : "Follow"}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify(targetUserId)
                });

                if (response.ok) {
                    const data = await response.json();
                    if (data && data.isFollowing !== undefined) {
                        followButton.textContent = data.isFollowing ? "Following" : "Follow";
                        followButton.className = data.isFollowing ? "btn btn-secondary" : "btn btn-primary";
                    } else {
                        console.error('Unexpected response format:', data);
                    }
                } else {
                    console.error('Failed to toggle follow:', response.status, response.statusText);
                }
            } catch (error) {
                console.error('Error toggling follow:', error);
            }
        }

        let page = @Model.Page;
        const pageSize = @Model.PageSize;
        const postContainer = document.getElementById('post-container');
        const loadingSpinner = document.getElementById('loading-spinner');
        let isLoading = false;

        window.addEventListener('scroll', async () => {
            if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 100 && !isLoading) {
                isLoading = true;
                loadingSpinner.style.display = 'block';
                page++;

                const response = await fetch(`@Url.Action("UserPosts", "Posts")?userId=@Model.User.Id&page=${page}&pageSize=${pageSize}`, {
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                });
                const postsHtml = await response.text();
                postContainer.insertAdjacentHTML('beforeend', postsHtml);
                isLoading = false;
                loadingSpinner.style.display = 'none';
            }
        });
    </script>
}