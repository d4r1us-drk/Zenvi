@model Zenvi.Models.HomeViewModel

<div class="container-fluid">
    <div class="row justify-content-center">
        <!-- Sidebar -->
        <div class="col-md-4">
            <div class="card">
                <div class="card_background_img" style="background-image: url('@(Model.User.BannerPicture != null ? Url.Content($"~/media/{Model.User.BannerPicture.Name}") : Url.Content("~/images/profile-banner-placeholder.png"))');"></div>
                <div class="card_profile_img" style="background-image: url('@(Model.User.ProfilePicture != null ? Url.Content($"~/media/{Model.User.ProfilePicture.Name}") : Url.Content("~/images/profile-picture-placeholder.png"))');"></div>
                <div class="user_details justify-content-center" style="display: flex;">
                    <h3>@Model.User.Name @Model.User.Surname</h3>
                    <a href="~/Identity/Account/Manage" class="btn btn-primary" style="margin-left: 20px;">Edit profile</a>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="col-md-8">
            <div id="post-container">
                @await Html.PartialAsync("_PostListPartial", Model.Posts)
            </div>
            <div id="loading-spinner" style="display:none;">
                <p>Loading...</p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let page = 1;
        const pageSize = 5;
        const postContainer = document.getElementById('post-container');
        const loadingSpinner = document.getElementById('loading-spinner');
        let isLoading = false;

        window.addEventListener('scroll', async () => {
            if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 100 && !isLoading) {
                isLoading = true;
                loadingSpinner.style.display = 'block';
                page++;

                const response = await fetch(`@Url.Action("GetFollowedPosts", "Home")?page=${page}&pageSize=${pageSize}`, {
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                });
                const postsHtml = await response.text();
                postContainer.insertAdjacentHTML('beforeend', postsHtml);
                isLoading = false;
                loadingSpinner.style.display = 'none';
            }
        });
    </script>
}